{"version":3,"file":"dev-server-ports.esm.js","sources":["../src/constants.ts","../src/reporter.ts","../src/utils.ts","../src/helpers.ts"],"sourcesContent":["/**\n * MIT License\n *\n * Copyright (c) 2022 Brion Mario\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n// Reserved well-known ports that require sudo permissions.\nexport const WELL_KNOWN_PORT_RANGE: number[] = [ 0, 1024 ];\n","/**\n * MIT License\n *\n * Copyright (c) 2022 Brion Mario\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport chalk from \"chalk\";\nimport { getProcessForPort } from \"./helpers\";\nimport { IProcessInfo, IReporter, IReporterExtensions } from \"./models\";\n\nexport class Reporter implements IReporter {\n\n  static extensions: Partial<IReporterExtensions> | undefined;\n  static overrides: Partial<IReporter> | undefined;\n\n  /**\n   * Constructor.\n   * @param extensions - Extensions.\n   * @param overrides - Overrides.\n   */\n  constructor(extensions?: Partial<IReporterExtensions>, overrides?: Partial<IReporter>) {\n    Reporter.extensions = extensions;\n    Reporter.overrides = overrides;\n  }\n\n  /**\n   * Get the root permission required message\n   *\n   * @param wellknownPortRange - Range of reserved wellknown ports.\n   * @returns Returns a formatted root permission required message as a string.\n   */\n  @override()\n  @extend()\n  getMissingRootPermissionMessage(wellknownPortRange: number[]): string {\n    return chalk.redBright(`Admin permissions are required to run a server on a port below ${\n      wellknownPortRange[1] }.`);\n  }\n\n  /**\n   * Get the process information report.\n   *\n   * @param process - Process info.\n   * @returns Returns a formatted process info report as a string.\n   */\n  @override()\n  @extend()\n  getProcessInfoReport(process: IProcessInfo): string {\n    return `\n    process       : ${ chalk.cyan(process.command) }\n    pid           : ${ chalk.grey(process.pid)}\n    invoked from  : ${ chalk.blue(process.directory) }`;\n  }\n\n  /**\n   * Get the port in use disclaimer message.\n   *\n   * @param port - Port which the server is running on.\n   * @returns Returns a formatted port in use disclaimer message as a string.\n   */\n  @override()\n  @extend()\n  getPortInUseDisclaimerMessage(port: number): string {\n\n    return `${ chalk.bgRedBright(chalk.whiteBright(\"PORT IN USE\")) } ${\n      chalk.white(\"-\" )\n    } Someone is already using the port ${ chalk.bold(chalk.yellowBright(port)) }.`;\n  }\n\n  /**\n   * Get the port fallback confirmarion message.\n   *\n   * @param availablePorts - Available ports.\n   * @returns Returns a formatted port fallback prompt message as a string.\n   */\n  @override()\n  @extend()\n  getNonePortFallbackMessage(availablePorts: number[]): string {\n\n    return `\n${ chalk.yellowBright(\"If possible, free up the port or choose an avaiable one.\") }\n\nThe following ${ availablePorts.length > 1 ? \"ports are\" : \"port is\" } available:\n\n        ${ chalk.green(availablePorts.join(\"\\n\")) }\n\n${ this.getProcessTerminationMessage() }`;\n  }\n\n  /**\n   * Get the port fallback confirmation message.\n   *\n   * @returns Returns a formatted port fallback confirmation message as a string.\n   */\n  @override()\n  @extend()\n  getPortFallbackConfirmation(): string {\n\n    return \"Would you like to run the app on another port instead?\";\n  }\n\n  /**\n   * Build and print the port fallback confirmarion message.\n   *\n   * @param port - Requested Port.\n   * @param availablePort - Aavailable port.\n   * @param isInteractive - Should show port fallback confirmation on the prompt.\n   * @returns Returns a formatted port in use prompt as a string.\n   */\n  @override()\n  @extend()\n  buildPortInUsePromptMessage(port: number, availablePort: number, isInteractive: boolean | undefined): string {\n\n    const { command, directory, pid } = getProcessForPort(port);\n    const confirmation: string = isInteractive\n      ? this.getPortFallbackConfirmation()\n      : this.getNonePortFallbackMessage([ availablePort ]);\n\n    return `${ this.getPortInUseDisclaimerMessage(port) }\n    ${ this.getProcessInfoReport({ command, directory, pid }) }\n    \n${ confirmation }`;\n  }\n\n  /**\n   * Get the un-interative terminal error message.\n   *\n   * @returns Returns un-interative terminal error message as a string.\n   */\n  @override()\n  @extend()\n  getUnInteractiveTerminalError(): string {\n\n    return chalk.red(\"Prompt couldn't be rendered in the current environment.\");\n  }\n\n  /**\n   * Get the generic prompt error message.\n   *\n   * @returns Returns a generic prompt error message as a string.\n   */\n  @override()\n  @extend()\n  getGenericPromptError(): string {\n\n    return chalk.red(\"Something wen wrong when trying to render the prompt.\");\n  }\n\n  /**\n   * Get no open port on host error message.\n   *\n   * @param hostname - Host.\n   * @param error - Error object.\n   * @returns Returns no open port on host error message as string.\n   */\n  @override()\n  @extend()\n  getOpenPortUnAvailablityOnHost(hostname: string | undefined, error: Error): string {\n    return `${ chalk.red(`Could not find an open port at ${ chalk.bold(hostname) }.`) }\n\n              (Network error message: ${ error.message || error })\n    }`;\n  }\n\n  /**\n   * Get process termination message.\n   *\n   * @returns Returns a message containing process termination info.\n   */\n  @override()\n  @extend()\n  getProcessTerminationMessage(): string {\n\n    return `${ chalk.white(\"Press ctrl/cmd + c to exit.\") }`;\n  }\n}\n\n/**\n * Override decorator.\n *\n * @returns Returns the result of the execution.\n */\nfunction override(): any {\n\n  return function(_target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function (...args: any[]) {\n\n      let result: any = originalMethod.apply(this, args);\n\n      if ((this.constructor as any)?.overrides\n        && Object.prototype.hasOwnProperty.call((this.constructor as any).overrides, propertyKey)) {\n        result = (this.constructor as any).overrides[propertyKey].apply(this, args);\n      }\n\n      return result;\n    };\n  };\n}\n\n/**\n * Extension decorator.\n *\n * @returns Returns the result of the execution.\n */\nfunction extend(): any {\n\n  return function(_target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function (...args: any[]) {\n\n      let result: any = originalMethod.apply(this, args);\n\n      if ((this.constructor as any)?.extensions) {\n        if (Object.prototype.hasOwnProperty.call((this.constructor as any).extensions, `BEFORE_${ propertyKey }`)) {\n          result = `${ (this.constructor as any).extensions[`BEFORE_${ propertyKey }`].apply(this, args) }\n\n${ result }`;\n        }\n\n        if (Object.prototype.hasOwnProperty.call((this.constructor as any).extensions, `AFTER_${ propertyKey }`)) {\n          result = `${ result }\n\n${ (this.constructor as any).extensions[`AFTER_${ propertyKey }`].apply(this, args) }`;\n        }\n      }\n\n      return result;\n    };\n  };\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2022 Brion Mario\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint-disable no-console */\nexport const logger: {\n  debug: (message?: any, ...optionalParams: any[]) => void;\n  error: (message?: any, ...optionalParams: any[]) => void;\n  info: (message?: any, ...optionalParams: any[]) => void;\n} = {\n  debug: console.debug,\n  error: console.error,\n  info: console.log\n};\n/* eslint-disable no-console */\n","/**\n * MIT License\n *\n * Copyright (c) 2022 Brion Mario\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport child_process, { ExecSyncOptionsWithStringEncoding } from \"child_process\";\nimport path from \"path\";\nimport readline from \"readline\";\nimport detect from \"detect-port\";\nimport inquirer, { Question } from \"inquirer\";\nimport isRoot from \"is-root\";\nimport { WELL_KNOWN_PORT_RANGE } from \"./constants\";\nimport { IProcessInfo, IReporter, IReporterExtensions } from \"./models\";\nimport { Reporter } from \"./reporter\";\nimport { logger } from \"./utils\";\n\n// Check if the process is running on a text terminal.\nconst IS_INTERACTIVE: boolean = process.stdout.isTTY;\n\nconst execOptions: ExecSyncOptionsWithStringEncoding = {\n  encoding: \"utf8\",\n  // eslint-disable-next-line @typescript-eslint/no-array-constructor\n  stdio: [\n    \"pipe\", // stdin (default)\n    \"pipe\", // stdout (default)\n    \"ignore\" //stderr\n  ]\n};\n\n/**\n * Clears the terminal screen.\n *\n * @example\n * Usage:\n * ```\n * // Clears the terminal.\n * clearTerminal();\n * ```\n *\n * @returns Returns a void.\n */\nexport const clearTerminal = (): void => {\n\n  process.stdout.write(process.platform === \"win32\" ? \"\\x1B[2J\\x1B[0f\" : \"\\x1B[2J\\x1B[3J\\x1B[H\");\n};\n\n/**\n * Get the process id (pid) on the given port.\n *\n * @example\n * Usage:\n * ```\n * // Returns a numeric value as a string like \"55543\".\n * getProcessIdOnPort(3000);\n * ```\n *\n * @param port - Port number.\n * @returns \n */\nexport const getProcessIdOnPort = (port: number): string => {\n\n  return child_process\n    .execFileSync(\"lsof\", [ \"-i:\" + port, \"-P\", \"-t\", \"-sTCP:LISTEN\" ], execOptions)\n    .split(\"\\n\")[0]\n    .trim();\n};\n\n/**\n * Get the directory of the process with the given id (pid).\n *\n * @param processId - Process id.\n * @returns Returns the directory of the process.\n */\nexport const getDirectoryOfProcessById = (processId: string): string => {\n\n  return child_process\n    .execSync(\"lsof -p \" + processId + \" | awk '$4==\\\"cwd\\\" {for (i=9; i<=NF; i++) printf \\\"%s \\\", $i}'\", execOptions)\n    .trim();\n};\n\n/**\n * Checks if the process is a known Node.js process.\n *\n * @param processCommand - Command ran for the process.\n * @returns Returns true if the process is a React app.\n */\nconst isKnownNodeProcess = (processCommand: string): boolean => {\n\n  return /^node .*react-scripts\\/scripts\\/start\\.js\\s?$/.test(processCommand);\n};\n\n/**\n * Get the package name in the given directory.\n *\n * @param directory - Directory to search for package.json.\n * @returns Returns the package name.\n */\nexport const getPackageNameInDirectory = (directory: string): string | null => {\n\n  const packagePath: string = path.join(directory.trim(), \"package.json\");\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    return require(packagePath).name;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * Get the command ran for the process with the given id (pid).\n *\n * @param processId - Process id.\n * @param processDirectory - Directory of the process.\n * @returns Returns the command ran for the process.\n */\nexport const getProcessCommand = (processId: string, processDirectory: string): string => {\n\n  let command: string = child_process.execSync(\"ps -o command -p \" + processId + \" | sed -n 2p\", execOptions);\n\n  command = command.replace(/\\n$/, \"\");\n\n  // If thr process is a known Node.js process, get the package name from `package.json`.\n  if (isKnownNodeProcess(command)) {\n    const packageName: string | null = getPackageNameInDirectory(processDirectory);\n\n    return packageName ? packageName : command;\n  } else {\n    return command;\n  }\n};\n\n/**\n * Get the process information for the given port.\n *\n * @param port - Port number.\n * @returns Returns the process information or null.\n */\nexport const getProcessForPort = (port: number): IProcessInfo => {\n  \n  try {\n    const pid: string = getProcessIdOnPort(port);\n    const directory: string = getDirectoryOfProcessById(pid);\n    const command: string= getProcessCommand(pid, directory);\n\n    return {\n      command,\n      directory,\n      pid\n    };\n  } catch (e) {\n    return {\n      command: undefined,\n      directory: undefined,\n      pid: undefined\n    };\n  }\n};\n\n/**\n * Shows a message without any interactions and exits the process on `ctrl+c`.\n * @param message - Message to show.\n */\nconst showNonInteractivePrompt = (message: string): void => {\n\n  logger.info(message);\n  readline.emitKeypressEvents(process.stdin);\n  process.stdin.setRawMode(true);\n  process.stdin.resume();\n  process.stdin.on(\"keypress\", (str) => {\n    if (str === \"\\u0003\") {\n      process.exit();\n    }\n  });\n};\n\n/**\n * Find a port that is available for use.\n *\n * @param port - Preffered port number. ex: 3000\n * @param hostname - Host name. ex: \"0.0.0.0\" | \"localhost\"\n * @param reporter - Reporter overrides and extensions.\n * @returns Returns a promise that resolves to the available port or null on error.\n */\nexport const findPort = (port: number,\n  hostname?: string,\n  shouldFallback?: boolean | undefined,\n  reporter?: {\n    extensions: Partial<IReporterExtensions>;\n    overrides: Partial<IReporter>;\n  }\n): Promise<number | null> => {\n\n  const _port: number = typeof port === \"number\" ? port : parseInt(port, 10);\n  const _reporter: IReporter = new Reporter(reporter?.extensions, reporter?.overrides);\n\n  return detect({\n    hostname,\n    port: _port\n  })\n    .then((availablePort: number) => new Promise(\n      (resolve) => {\n        if (availablePort === _port) {\n          return resolve(availablePort);\n        }\n\n        const needSudoPermissions: boolean = (process.platform !== \"win32\"\n          && (_port < WELL_KNOWN_PORT_RANGE[1] || availablePort < WELL_KNOWN_PORT_RANGE[1])\n          && !isRoot());\n\n        const question: Question = {\n          default: true,\n          message: _reporter.buildPortInUsePromptMessage(_port, availablePort, shouldFallback),\n          name: \"shouldChangePort\",\n          type: \"confirm\"\n        };\n\n        // If the port needs permission to run, show a message & terminate on ctrl + c.\n        if (needSudoPermissions) {\n          showNonInteractivePrompt(_reporter.getMissingRootPermissionMessage(WELL_KNOWN_PORT_RANGE));\n\n          return;\n        }\n\n        if (IS_INTERACTIVE) {\n          // First clear the terminal.\n          clearTerminal();\n\n          if (shouldFallback === false) {\n            showNonInteractivePrompt(question.message as string);\n          } else {\n            inquirer\n              .prompt([ question ])\n              .then((answers) => {\n                if (answers.shouldChangePort) {\n                  resolve(availablePort);\n                } else {\n                  process.exit();\n                }\n              })\n              .catch((error) => {\n                if (error.isTtyError) {\n                  _reporter.getUnInteractiveTerminalError();\n                } else {\n                  _reporter.getGenericPromptError();\n                }\n              });\n          }\n        } else {\n          showNonInteractivePrompt(question.message as string);\n        }\n      }\n    ),\n    (err) => {\n      throw new Error(_reporter.getOpenPortUnAvailablityOnHost(hostname, err));\n    });\n};\n"],"names":["WELL_KNOWN_PORT_RANGE","Reporter","extensions","overrides","getMissingRootPermissionMessage","wellknownPortRange","chalk","redBright","getProcessInfoReport","process","cyan","command","grey","pid","blue","directory","getPortInUseDisclaimerMessage","port","bgRedBright","whiteBright","white","bold","yellowBright","getNonePortFallbackMessage","availablePorts","length","green","join","getProcessTerminationMessage","getPortFallbackConfirmation","buildPortInUsePromptMessage","availablePort","isInteractive","getProcessForPort","confirmation","getUnInteractiveTerminalError","red","getGenericPromptError","getOpenPortUnAvailablityOnHost","hostname","error","message","__decorate","override","extend","_target","propertyKey","descriptor","originalMethod","value","args","result","apply","constructor","Object","prototype","hasOwnProperty","call","logger","debug","console","info","log","IS_INTERACTIVE","stdout","isTTY","execOptions","encoding","stdio","clearTerminal","write","platform","getProcessIdOnPort","child_process","execFileSync","split","trim","getDirectoryOfProcessById","processId","execSync","isKnownNodeProcess","processCommand","test","getPackageNameInDirectory","packagePath","path","require","name","e","getProcessCommand","processDirectory","replace","packageName","undefined","showNonInteractivePrompt","readline","emitKeypressEvents","stdin","setRawMode","resume","on","str","exit","findPort","shouldFallback","reporter","_port","parseInt","_reporter","detect","then","Promise","resolve","needSudoPermissions","isRoot","question","type","inquirer","prompt","answers","shouldChangePort","isTtyError","err","Error"],"mappings":"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"}