{"version":3,"file":"dev-server-ports.cjs.production.min.js","sources":["../src/constants.ts","../src/reporter.ts","../src/utils.ts","../src/helpers.ts"],"sourcesContent":["/**\n * MIT License\n *\n * Copyright (c) 2022 Brion Mario\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n// Reserved well-known ports that require sudo permissions.\nexport const WELL_KNOWN_PORT_RANGE: number[] = [ 0, 1024 ];\n","/**\n * MIT License\n *\n * Copyright (c) 2022 Brion Mario\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport chalk from \"chalk\";\nimport { getProcessForPort } from \"./helpers\";\nimport { IProcessInfo, IReporter, IReporterExtensions } from \"./models\";\n\nexport class Reporter implements IReporter {\n\n  static extensions: Partial<IReporterExtensions> | undefined;\n  static overrides: Partial<IReporter> | undefined;\n\n  /**\n   * Constructor.\n   * @param extensions - Extensions.\n   * @param overrides - Overrides.\n   */\n  constructor(extensions?: Partial<IReporterExtensions>, overrides?: Partial<IReporter>) {\n    Reporter.extensions = extensions;\n    Reporter.overrides = overrides;\n  }\n\n  /**\n   * Get the root permission required message\n   *\n   * @param wellknownPortRange - Range of reserved wellknown ports.\n   * @returns Returns a formatted root permission required message as a string.\n   */\n  @override()\n  @extend()\n  getMissingRootPermissionMessage(wellknownPortRange: number[]): string {\n    return chalk.redBright(`Admin permissions are required to run a server on a port below ${\n      wellknownPortRange[1] }.`);\n  }\n\n  /**\n   * Get the process information report.\n   *\n   * @param process - Process info.\n   * @returns Returns a formatted process info report as a string.\n   */\n  @override()\n  @extend()\n  getProcessInfoReport(process: IProcessInfo): string {\n    return `\n    process       : ${ chalk.cyan(process.command) }\n    pid           : ${ chalk.grey(process.pid)}\n    invoked from  : ${ chalk.blue(process.directory) }`;\n  }\n\n  /**\n   * Get the port in use disclaimer message.\n   *\n   * @param port - Port which the server is running on.\n   * @returns Returns a formatted port in use disclaimer message as a string.\n   */\n  @override()\n  @extend()\n  getPortInUseDisclaimerMessage(port: number): string {\n\n    return `${ chalk.bgRedBright(chalk.whiteBright(\"PORT IN USE\")) } ${\n      chalk.white(\"-\" )\n    } Someone is already using the port ${ chalk.bold(chalk.yellowBright(port)) }.`;\n  }\n\n  /**\n   * Get the port fallback confirmarion message.\n   *\n   * @param availablePorts - Available ports.\n   * @returns Returns a formatted port fallback prompt message as a string.\n   */\n  @override()\n  @extend()\n  getNonePortFallbackMessage(availablePorts: number[]): string {\n\n    return `\n${ chalk.yellowBright(\"If possible, free up the port or choose an avaiable one.\") }\n\nThe following ${ availablePorts.length > 1 ? \"ports are\" : \"port is\" } available:\n\n        ${ chalk.green(availablePorts.join(\"\\n\")) }\n\n${ this.getProcessTerminationMessage() }`;\n  }\n\n  /**\n   * Get the port fallback confirmation message.\n   *\n   * @returns Returns a formatted port fallback confirmation message as a string.\n   */\n  @override()\n  @extend()\n  getPortFallbackConfirmation(): string {\n\n    return \"Would you like to run the app on another port instead?\";\n  }\n\n  /**\n   * Build and print the port fallback confirmarion message.\n   *\n   * @param port - Requested Port.\n   * @param availablePort - Aavailable port.\n   * @param isInteractive - Should show port fallback confirmation on the prompt.\n   * @returns Returns a formatted port in use prompt as a string.\n   */\n  @override()\n  @extend()\n  buildPortInUsePromptMessage(port: number, availablePort: number, isInteractive: boolean | undefined): string {\n\n    const { command, directory, pid } = getProcessForPort(port);\n    const confirmation: string = isInteractive\n      ? this.getPortFallbackConfirmation()\n      : this.getNonePortFallbackMessage([ availablePort ]);\n\n    return `${ this.getPortInUseDisclaimerMessage(port) }\n    ${ this.getProcessInfoReport({ command, directory, pid }) }\n    \n${ confirmation }`;\n  }\n\n  /**\n   * Get the un-interative terminal error message.\n   *\n   * @returns Returns un-interative terminal error message as a string.\n   */\n  @override()\n  @extend()\n  getUnInteractiveTerminalError(): string {\n\n    return chalk.red(\"Prompt couldn't be rendered in the current environment.\");\n  }\n\n  /**\n   * Get the generic prompt error message.\n   *\n   * @returns Returns a generic prompt error message as a string.\n   */\n  @override()\n  @extend()\n  getGenericPromptError(): string {\n\n    return chalk.red(\"Something wen wrong when trying to render the prompt.\");\n  }\n\n  /**\n   * Get no open port on host error message.\n   *\n   * @param hostname - Host.\n   * @param error - Error object.\n   * @returns Returns no open port on host error message as string.\n   */\n  @override()\n  @extend()\n  getOpenPortUnAvailablityOnHost(hostname: string | undefined, error: Error): string {\n    return `${ chalk.red(`Could not find an open port at ${ chalk.bold(hostname) }.`) }\n\n              (Network error message: ${ error.message || error })\n    }`;\n  }\n\n  /**\n   * Get process termination message.\n   *\n   * @returns Returns a message containing process termination info.\n   */\n  @override()\n  @extend()\n  getProcessTerminationMessage(): string {\n\n    return `${ chalk.white(\"Press ctrl/cmd + c to exit.\") }`;\n  }\n}\n\n/**\n * Override decorator.\n *\n * @returns Returns the result of the execution.\n */\nfunction override(): any {\n\n  return function(_target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function (...args: any[]) {\n\n      let result: any = originalMethod.apply(this, args);\n\n      if ((this.constructor as any)?.overrides\n        && Object.prototype.hasOwnProperty.call((this.constructor as any).overrides, propertyKey)) {\n        result = (this.constructor as any).overrides[propertyKey].apply(this, args);\n      }\n\n      return result;\n    };\n  };\n}\n\n/**\n * Extension decorator.\n *\n * @returns Returns the result of the execution.\n */\nfunction extend(): any {\n\n  return function(_target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function (...args: any[]) {\n\n      let result: any = originalMethod.apply(this, args);\n\n      if ((this.constructor as any)?.extensions) {\n        if (Object.prototype.hasOwnProperty.call((this.constructor as any).extensions, `BEFORE_${ propertyKey }`)) {\n          result = `${ (this.constructor as any).extensions[`BEFORE_${ propertyKey }`].apply(this, args) }\n\n${ result }`;\n        }\n\n        if (Object.prototype.hasOwnProperty.call((this.constructor as any).extensions, `AFTER_${ propertyKey }`)) {\n          result = `${ result }\n\n${ (this.constructor as any).extensions[`AFTER_${ propertyKey }`].apply(this, args) }`;\n        }\n      }\n\n      return result;\n    };\n  };\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2022 Brion Mario\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint-disable no-console */\nexport const logger: {\n  debug: (message?: any, ...optionalParams: any[]) => void;\n  error: (message?: any, ...optionalParams: any[]) => void;\n  info: (message?: any, ...optionalParams: any[]) => void;\n} = {\n  debug: console.debug,\n  error: console.error,\n  info: console.log\n};\n/* eslint-disable no-console */\n","/**\n * MIT License\n *\n * Copyright (c) 2022 Brion Mario\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport child_process, { ExecSyncOptionsWithStringEncoding } from \"child_process\";\nimport path from \"path\";\nimport readline from \"readline\";\nimport detect from \"detect-port\";\nimport inquirer, { Question } from \"inquirer\";\nimport isRoot from \"is-root\";\nimport { WELL_KNOWN_PORT_RANGE } from \"./constants\";\nimport { IProcessInfo, IReporter, IReporterExtensions } from \"./models\";\nimport { Reporter } from \"./reporter\";\nimport { logger } from \"./utils\";\n\n// Check if the process is running on a text terminal.\nconst IS_INTERACTIVE: boolean = process.stdout.isTTY;\n\nconst execOptions: ExecSyncOptionsWithStringEncoding = {\n  encoding: \"utf8\",\n  // eslint-disable-next-line @typescript-eslint/no-array-constructor\n  stdio: [\n    \"pipe\", // stdin (default)\n    \"pipe\", // stdout (default)\n    \"ignore\" //stderr\n  ]\n};\n\n/**\n * Clears the terminal screen.\n *\n * @example\n * Usage:\n * ```\n * // Clears the terminal.\n * clearTerminal();\n * ```\n *\n * @returns Returns a void.\n */\nexport const clearTerminal = (): void => {\n\n  process.stdout.write(process.platform === \"win32\" ? \"\\x1B[2J\\x1B[0f\" : \"\\x1B[2J\\x1B[3J\\x1B[H\");\n};\n\n/**\n * Get the process id (pid) on the given port.\n *\n * @example\n * Usage:\n * ```\n * // Returns a numeric value as a string like \"55543\".\n * getProcessIdOnPort(3000);\n * ```\n *\n * @param port - Port number.\n * @returns \n */\nexport const getProcessIdOnPort = (port: number): string => {\n\n  return child_process\n    .execFileSync(\"lsof\", [ \"-i:\" + port, \"-P\", \"-t\", \"-sTCP:LISTEN\" ], execOptions)\n    .split(\"\\n\")[0]\n    .trim();\n};\n\n/**\n * Get the directory of the process with the given id (pid).\n *\n * @param processId - Process id.\n * @returns Returns the directory of the process.\n */\nexport const getDirectoryOfProcessById = (processId: string): string => {\n\n  return child_process\n    .execSync(\"lsof -p \" + processId + \" | awk '$4==\\\"cwd\\\" {for (i=9; i<=NF; i++) printf \\\"%s \\\", $i}'\", execOptions)\n    .trim();\n};\n\n/**\n * Checks if the process is a known Node.js process.\n *\n * @param processCommand - Command ran for the process.\n * @returns Returns true if the process is a React app.\n */\nconst isKnownNodeProcess = (processCommand: string): boolean => {\n\n  return /^node .*react-scripts\\/scripts\\/start\\.js\\s?$/.test(processCommand);\n};\n\n/**\n * Get the package name in the given directory.\n *\n * @param directory - Directory to search for package.json.\n * @returns Returns the package name.\n */\nexport const getPackageNameInDirectory = (directory: string): string | null => {\n\n  const packagePath: string = path.join(directory.trim(), \"package.json\");\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    return require(packagePath).name;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * Get the command ran for the process with the given id (pid).\n *\n * @param processId - Process id.\n * @param processDirectory - Directory of the process.\n * @returns Returns the command ran for the process.\n */\nexport const getProcessCommand = (processId: string, processDirectory: string): string => {\n\n  let command: string = child_process.execSync(\"ps -o command -p \" + processId + \" | sed -n 2p\", execOptions);\n\n  command = command.replace(/\\n$/, \"\");\n\n  // If thr process is a known Node.js process, get the package name from `package.json`.\n  if (isKnownNodeProcess(command)) {\n    const packageName: string | null = getPackageNameInDirectory(processDirectory);\n\n    return packageName ? packageName : command;\n  } else {\n    return command;\n  }\n};\n\n/**\n * Get the process information for the given port.\n *\n * @param port - Port number.\n * @returns Returns the process information or null.\n */\nexport const getProcessForPort = (port: number): IProcessInfo => {\n  \n  try {\n    const pid: string = getProcessIdOnPort(port);\n    const directory: string = getDirectoryOfProcessById(pid);\n    const command: string= getProcessCommand(pid, directory);\n\n    return {\n      command,\n      directory,\n      pid\n    };\n  } catch (e) {\n    return {\n      command: undefined,\n      directory: undefined,\n      pid: undefined\n    };\n  }\n};\n\n/**\n * Shows a message without any interactions and exits the process on `ctrl+c`.\n * @param message - Message to show.\n */\nconst showNonInteractivePrompt = (message: string): void => {\n\n  logger.info(message);\n  readline.emitKeypressEvents(process.stdin);\n  process.stdin.setRawMode(true);\n  process.stdin.resume();\n  process.stdin.on(\"keypress\", (str) => {\n    if (str === \"\\u0003\") {\n      process.exit();\n    }\n  });\n};\n\n/**\n * Find a port that is available for use.\n *\n * @param port - Preffered port number. ex: 3000\n * @param hostname - Host name. ex: \"0.0.0.0\" | \"localhost\"\n * @param reporter - Reporter overrides and extensions.\n * @returns Returns a promise that resolves to the available port or null on error.\n */\nexport const findPort = (port: number,\n  hostname?: string,\n  shouldFallback?: boolean | undefined,\n  reporter?: {\n    extensions: Partial<IReporterExtensions>;\n    overrides: Partial<IReporter>;\n  }\n): Promise<number | null> => {\n\n  const _port: number = typeof port === \"number\" ? port : parseInt(port, 10);\n  const _reporter: IReporter = new Reporter(reporter?.extensions, reporter?.overrides);\n\n  return detect({\n    hostname,\n    port: _port\n  })\n    .then((availablePort: number) => new Promise(\n      (resolve) => {\n        if (availablePort === _port) {\n          return resolve(availablePort);\n        }\n\n        const needSudoPermissions: boolean = (process.platform !== \"win32\"\n          && (_port < WELL_KNOWN_PORT_RANGE[1] || availablePort < WELL_KNOWN_PORT_RANGE[1])\n          && !isRoot());\n\n        const question: Question = {\n          default: true,\n          message: _reporter.buildPortInUsePromptMessage(_port, availablePort, shouldFallback),\n          name: \"shouldChangePort\",\n          type: \"confirm\"\n        };\n\n        // If the port needs permission to run, show a message & terminate on ctrl + c.\n        if (needSudoPermissions) {\n          showNonInteractivePrompt(_reporter.getMissingRootPermissionMessage(WELL_KNOWN_PORT_RANGE));\n\n          return;\n        }\n\n        if (IS_INTERACTIVE) {\n          // First clear the terminal.\n          clearTerminal();\n\n          if (shouldFallback === false) {\n            showNonInteractivePrompt(question.message as string);\n          } else {\n            inquirer\n              .prompt([ question ])\n              .then((answers) => {\n                if (answers.shouldChangePort) {\n                  resolve(availablePort);\n                } else {\n                  process.exit();\n                }\n              })\n              .catch((error) => {\n                if (error.isTtyError) {\n                  _reporter.getUnInteractiveTerminalError();\n                } else {\n                  _reporter.getGenericPromptError();\n                }\n              });\n          }\n        } else {\n          showNonInteractivePrompt(question.message as string);\n        }\n      }\n    ),\n    (err) => {\n      throw new Error(_reporter.getOpenPortUnAvailablityOnHost(hostname, err));\n    });\n};\n"],"names":["WELL_KNOWN_PORT_RANGE","Reporter","extensions","overrides","getMissingRootPermissionMessage","wellknownPortRange","chalk","redBright","getProcessInfoReport","process","cyan","command","grey","pid","blue","directory","getPortInUseDisclaimerMessage","port","bgRedBright","whiteBright","white","bold","yellowBright","getNonePortFallbackMessage","availablePorts","length","green","join","this","getProcessTerminationMessage","getPortFallbackConfirmation","buildPortInUsePromptMessage","availablePort","isInteractive","getProcessForPort","confirmation","getUnInteractiveTerminalError","red","getGenericPromptError","getOpenPortUnAvailablityOnHost","hostname","error","message","override","_target","propertyKey","descriptor","originalMethod","value","args","result","apply","constructor","Object","prototype","hasOwnProperty","call","extend","_this$constructor2","__decorate","logger","debug","console","info","log","IS_INTERACTIVE","stdout","isTTY","execOptions","encoding","stdio","clearTerminal","write","platform","getProcessIdOnPort","child_process","execFileSync","split","trim","getDirectoryOfProcessById","processId","execSync","getPackageNameInDirectory","packagePath","path","require","name","e","getProcessCommand","processDirectory","replace","test","undefined","showNonInteractivePrompt","readline","emitKeypressEvents","stdin","setRawMode","resume","on","str","exit","shouldFallback","reporter","_port","parseInt","_reporter","detect","then","Promise","resolve","needSudoPermissions","isRoot","question","type","inquirer","prompt","answers","shouldChangePort","isTtyError","err","Error"],"mappings":"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"}